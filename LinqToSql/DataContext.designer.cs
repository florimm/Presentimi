#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqToSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataTest")]
	public partial class DataContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertKlientat(Klientat instance);
    partial void UpdateKlientat(Klientat instance);
    partial void DeleteKlientat(Klientat instance);
    partial void InsertFaturat(Faturat instance);
    partial void UpdateFaturat(Faturat instance);
    partial void DeleteFaturat(Faturat instance);
    #endregion
		
		public DataContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Klientat> Klientats
		{
			get
			{
				return this.GetTable<Klientat>();
			}
		}
		
		public System.Data.Linq.Table<Faturat> Faturats
		{
			get
			{
				return this.GetTable<Faturat>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Klientat")]
	public partial class Klientat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Emri;
		
		private string _Mbiemri;
		
		private string _Adresa;
		
		private EntitySet<Faturat> _Faturats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmriChanging(string value);
    partial void OnEmriChanged();
    partial void OnMbiemriChanging(string value);
    partial void OnMbiemriChanged();
    partial void OnAdresaChanging(string value);
    partial void OnAdresaChanged();
    #endregion
		
		public Klientat()
		{
			this._Faturats = new EntitySet<Faturat>(new Action<Faturat>(this.attach_Faturats), new Action<Faturat>(this.detach_Faturats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emri", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Emri
		{
			get
			{
				return this._Emri;
			}
			set
			{
				if ((this._Emri != value))
				{
					this.OnEmriChanging(value);
					this.SendPropertyChanging();
					this._Emri = value;
					this.SendPropertyChanged("Emri");
					this.OnEmriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mbiemri", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Mbiemri
		{
			get
			{
				return this._Mbiemri;
			}
			set
			{
				if ((this._Mbiemri != value))
				{
					this.OnMbiemriChanging(value);
					this.SendPropertyChanging();
					this._Mbiemri = value;
					this.SendPropertyChanged("Mbiemri");
					this.OnMbiemriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adresa", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Adresa
		{
			get
			{
				return this._Adresa;
			}
			set
			{
				if ((this._Adresa != value))
				{
					this.OnAdresaChanging(value);
					this.SendPropertyChanging();
					this._Adresa = value;
					this.SendPropertyChanged("Adresa");
					this.OnAdresaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Klientat_Faturat", Storage="_Faturats", ThisKey="ID", OtherKey="KlientiID")]
		public EntitySet<Faturat> Faturats
		{
			get
			{
				return this._Faturats;
			}
			set
			{
				this._Faturats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Faturats(Faturat entity)
		{
			this.SendPropertyChanging();
			entity.Klientat = this;
		}
		
		private void detach_Faturats(Faturat entity)
		{
			this.SendPropertyChanging();
			entity.Klientat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faturat")]
	public partial class Faturat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _KlientiID;
		
		private string _Nr;
		
		private System.DateTime _Data;
		
		private decimal _Shuma;
		
		private EntityRef<Klientat> _Klientat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnKlientiIDChanging(int value);
    partial void OnKlientiIDChanged();
    partial void OnNrChanging(string value);
    partial void OnNrChanged();
    partial void OnDataChanging(System.DateTime value);
    partial void OnDataChanged();
    partial void OnShumaChanging(decimal value);
    partial void OnShumaChanged();
    #endregion
		
		public Faturat()
		{
			this._Klientat = default(EntityRef<Klientat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KlientiID", DbType="Int NOT NULL")]
		public int KlientiID
		{
			get
			{
				return this._KlientiID;
			}
			set
			{
				if ((this._KlientiID != value))
				{
					if (this._Klientat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKlientiIDChanging(value);
					this.SendPropertyChanging();
					this._KlientiID = value;
					this.SendPropertyChanged("KlientiID");
					this.OnKlientiIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nr", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Nr
		{
			get
			{
				return this._Nr;
			}
			set
			{
				if ((this._Nr != value))
				{
					this.OnNrChanging(value);
					this.SendPropertyChanging();
					this._Nr = value;
					this.SendPropertyChanged("Nr");
					this.OnNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="DateTime NOT NULL")]
		public System.DateTime Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shuma", DbType="Decimal(18,2) NOT NULL")]
		public decimal Shuma
		{
			get
			{
				return this._Shuma;
			}
			set
			{
				if ((this._Shuma != value))
				{
					this.OnShumaChanging(value);
					this.SendPropertyChanging();
					this._Shuma = value;
					this.SendPropertyChanged("Shuma");
					this.OnShumaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Klientat_Faturat", Storage="_Klientat", ThisKey="KlientiID", OtherKey="ID", IsForeignKey=true)]
		public Klientat Klientat
		{
			get
			{
				return this._Klientat.Entity;
			}
			set
			{
				Klientat previousValue = this._Klientat.Entity;
				if (((previousValue != value) 
							|| (this._Klientat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Klientat.Entity = null;
						previousValue.Faturats.Remove(this);
					}
					this._Klientat.Entity = value;
					if ((value != null))
					{
						value.Faturats.Add(this);
						this._KlientiID = value.ID;
					}
					else
					{
						this._KlientiID = default(int);
					}
					this.SendPropertyChanged("Klientat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
